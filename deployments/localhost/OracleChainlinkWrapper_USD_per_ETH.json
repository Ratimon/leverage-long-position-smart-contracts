{
  "address": "0xbd63D8E49d7007c1757fD6245E950a3517582536",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainlinkOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_peg",
          "type": "uint256"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chainlinkOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOutdated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDecimalsNormalizer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.D256",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dc302ea7444de26f280cd1f4038f7636c4506eb9043755bba91d33a6863a169",
  "receipt": {
    "to": null,
    "from": "0x305A65d6e453c613F47CB8173941d9b3d2604fBe",
    "contractAddress": "0xbd63D8E49d7007c1757fD6245E950a3517582536",
    "transactionIndex": 0,
    "gasUsed": "354270",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7bc504bf2b3e08cebff9c9e7f9d816229b61f26f0360a57a64df4ef2707e7e40",
    "transactionHash": "0x0dc302ea7444de26f280cd1f4038f7636c4506eb9043755bba91d33a6863a169",
    "logs": [],
    "blockNumber": 14518733,
    "cumulativeGasUsed": "354270",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
  ],
  "numDeployments": 1,
  "solcInputHash": "00805697ef62fdb68a8fef88f0980135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlinkOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_peg\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainlinkOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOutdated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDecimalsNormalizer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_chainlinkOracle\":\"reference to the target Chainlink oracle\"}},\"isOutdated()\":{\"returns\":{\"_0\":\"true if read value is stale\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"read()\":{\"returns\":{\"_0\":\"oracle price\",\"_1\":\"true if price is valid\"}},\"update()\":{\"details\":\"no-op, Chainlink is updated automatically\"}},\"title\":\"Chainlink oracle wrapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"chainlinkOracle()\":{\"notice\":\"the referenced chainlink oracle\"},\"constructor\":{\"notice\":\"ChainlinkOracleWrapper constructor\"},\"isOutdated()\":{\"notice\":\"determine if read value is stale\"},\"read()\":{\"notice\":\"read the oracle price\"},\"update()\":{\"notice\":\"updates the oracle price\"}},\"notice\":\"Reads a Chainlink oracle value & wrap it under the standard oracle interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/oracle/ChainlinkOracleWrapper.sol\":\"ChainlinkOracleWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"src/external/Decimal.sol\":{\"content\":\"/*\\n    Copyright 2019 dYdX Trading Inc.\\n    Copyright 2020 Empty Set Squad <emptysetsquad@protonmail.com>\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 private constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero() internal pure returns (D256 memory) {\\n        return D256({value: 0});\\n    }\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function from(uint256 a) internal pure returns (D256 memory) {\\n        return D256({value: a.mul(BASE)});\\n    }\\n\\n    function ratio(uint256 a, uint256 b) internal pure returns (D256 memory) {\\n        return D256({value: getPartial(a, BASE, b)});\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(D256 memory self, uint256 b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: self.value.add(b.mul(BASE))});\\n    }\\n\\n    function sub(D256 memory self, uint256 b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: self.value.sub(b.mul(BASE))});\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    ) internal pure returns (D256 memory) {\\n        return D256({value: self.value.sub(b.mul(BASE), reason)});\\n    }\\n\\n    function mul(D256 memory self, uint256 b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: self.value.mul(b)});\\n    }\\n\\n    function div(D256 memory self, uint256 b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: self.value.div(b)});\\n    }\\n\\n    function pow(D256 memory self, uint256 b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({value: self.value});\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: self.value.add(b.value)});\\n    }\\n\\n    function sub(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: self.value.sub(b.value)});\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    ) internal pure returns (D256 memory) {\\n        return D256({value: self.value.sub(b.value, reason)});\\n    }\\n\\n    function mul(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: getPartial(self.value, b.value, BASE)});\\n    }\\n\\n    function div(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (D256 memory)\\n    {\\n        return D256({value: getPartial(self.value, BASE, b.value)});\\n    }\\n\\n    function equals(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) private pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(D256 memory a, D256 memory b)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd932ca72bcd91535f972fca6940a92b5aef5f817e360934fe64ce6b498a9b7b7\"},\"src/oracle/ChainlinkOracleWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IOracle, Decimal} from \\\"./IOracle.sol\\\";\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @title Chainlink oracle wrapper\\n/// @notice Reads a Chainlink oracle value & wrap it under the standard oracle interface\\ncontract ChainlinkOracleWrapper is IOracle, Pausable {\\n    using Decimal for Decimal.D256;\\n\\n    /// @notice the referenced chainlink oracle\\n    AggregatorV3Interface public chainlinkOracle;\\n    uint256 public oracleDecimalsNormalizer;\\n\\n    /// @notice ChainlinkOracleWrapper constructor\\n    /// @param _chainlinkOracle reference to the target Chainlink oracle\\n    constructor(address _chainlinkOracle) {\\n        chainlinkOracle = AggregatorV3Interface(_chainlinkOracle);\\n\\n        _init();\\n    }\\n\\n    // @dev: decimals of the oracle are expected to never change, if Chainlink\\n    // updates that behavior in the future, we might consider reading the\\n    // oracle decimals() on every read() call.\\n    function _init() internal {\\n        uint8 oracleDecimals = chainlinkOracle.decimals();\\n        oracleDecimalsNormalizer = 10**uint256(oracleDecimals);\\n    }\\n\\n    /// @notice updates the oracle price\\n    /// @dev no-op, Chainlink is updated automatically\\n    function update() external view override whenNotPaused {}\\n\\n    /// @notice determine if read value is stale\\n    /// @return true if read value is stale\\n    function isOutdated() external view override returns (bool) {\\n        (uint80 roundId, , , , uint80 answeredInRound) = chainlinkOracle\\n            .latestRoundData();\\n        return answeredInRound != roundId;\\n    }\\n\\n    /// @notice read the oracle price\\n    /// @return oracle price\\n    /// @return true if price is valid\\n    function read() external view override returns (Decimal.D256 memory, bool) {\\n        (\\n            uint80 roundId,\\n            int256 price,\\n            ,\\n            ,\\n            uint80 answeredInRound\\n        ) = chainlinkOracle.latestRoundData();\\n        bool valid = !paused() && price > 0 && answeredInRound == roundId;\\n\\n        Decimal.D256 memory value = Decimal.from(uint256(price)).div(\\n            oracleDecimalsNormalizer\\n        );\\n        return (value, valid);\\n    }\\n}\\n\",\"keccak256\":\"0x3cd0f15a41fd0455097e1f89a0b05c377ed1f3b2935a6366e37da14a834c790c\",\"license\":\"GPL-3.0-or-later\"},\"src/oracle/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.13;\\n\\nimport \\\"../external/Decimal.sol\\\";\\n\\n/// @title generic oracle interface\\ninterface IOracle {\\n    // ----------- Events -----------\\n\\n    event Update(uint256 _peg);\\n\\n    // ----------- State changing API -----------\\n\\n    function update() external;\\n\\n    // ----------- Getters -----------\\n\\n    function read() external view returns (Decimal.D256 memory, bool);\\n\\n    function isOutdated() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdc7b8900d8ae3d3a8a9cb3d921bcdcd039ef434191b5a27eaecfd1a04b12f4b5\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106a53803806106a583398101604081905261002f916100ea565b600080546001600160a81b0319166101006001600160a01b0384160217905561005661005c565b50610245565b60008060019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d4919061011a565b90506100e460ff8216600a610239565b60015550565b6000602082840312156100fc57600080fd5b81516001600160a01b038116811461011357600080fd5b9392505050565b60006020828403121561012c57600080fd5b815160ff8116811461011357600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561018e5781600019048211156101745761017461013d565b8085161561018157918102915b93841c9390800290610158565b509250929050565b6000826101a557506001610233565b816101b257506000610233565b81600181146101c857600281146101d2576101ee565b6001915050610233565b60ff8411156101e3576101e361013d565b50506001821b610233565b5060208310610133831016604e8410600b8410161715610211575081810a610233565b61021b8383610153565b806000190482111561022f5761022f61013d565b0290505b92915050565b60006101138383610196565b610451806102546000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634117d71e1461006757806357de26a4146100835780635c975abb146100a157806374d3bae5146100b8578063a2e62045146100c0578063ef06e72c146100ca575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b61008b6100fa565b604080519251835290151560208301520161007a565b60005460ff165b604051901515815260200161007a565b6100a86101f2565b6100c861028c565b005b6000546100e29061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161007a565b604080516020810190915260008152600080600080600060019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610162573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610186919061037c565b9450505092509250600061019c60005460ff1690565b1580156101a95750600083135b80156101cc57508369ffffffffffffffffffff168269ffffffffffffffffffff16145b905060006101e56001546101df866102d8565b9061030d565b9791965090945050505050565b60008060008060019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d919061037c565b69ffffffffffffffffffff908116941693909314159695505050505050565b60005460ff16156102d65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640160405180910390fd5b565b60408051602081019091526000815260408051602081019091528061030584670de0b6b3a764000061033e565b905292915050565b6040805160208101909152600081526040805160208101909152835181906103359085610351565b90529392505050565b600061034a82846103cc565b9392505050565b600061034a82846103f9565b805169ffffffffffffffffffff8116811461037757600080fd5b919050565b600080600080600060a0868803121561039457600080fd5b61039d8661035d565b94506020860151935060408601519250606086015191506103c06080870161035d565b90509295509295909350565b60008160001904831182151516156103f457634e487b7160e01b600052601160045260246000fd5b500290565b60008261041657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cc59a8754cd6bd432eb05de503880fb78b492b3a852a643d384b1bed813b25aa64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80634117d71e1461006757806357de26a4146100835780635c975abb146100a157806374d3bae5146100b8578063a2e62045146100c0578063ef06e72c146100ca575b600080fd5b61007060015481565b6040519081526020015b60405180910390f35b61008b6100fa565b604080519251835290151560208301520161007a565b60005460ff165b604051901515815260200161007a565b6100a86101f2565b6100c861028c565b005b6000546100e29061010090046001600160a01b031681565b6040516001600160a01b03909116815260200161007a565b604080516020810190915260008152600080600080600060019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610162573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610186919061037c565b9450505092509250600061019c60005460ff1690565b1580156101a95750600083135b80156101cc57508369ffffffffffffffffffff168269ffffffffffffffffffff16145b905060006101e56001546101df866102d8565b9061030d565b9791965090945050505050565b60008060008060019054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d919061037c565b69ffffffffffffffffffff908116941693909314159695505050505050565b60005460ff16156102d65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640160405180910390fd5b565b60408051602081019091526000815260408051602081019091528061030584670de0b6b3a764000061033e565b905292915050565b6040805160208101909152600081526040805160208101909152835181906103359085610351565b90529392505050565b600061034a82846103cc565b9392505050565b600061034a82846103f9565b805169ffffffffffffffffffff8116811461037757600080fd5b919050565b600080600080600060a0868803121561039457600080fd5b61039d8661035d565b94506020860151935060408601519250606086015191506103c06080870161035d565b90509295509295909350565b60008160001904831182151516156103f457634e487b7160e01b600052601160045260246000fd5b500290565b60008261041657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cc59a8754cd6bd432eb05de503880fb78b492b3a852a643d384b1bed813b25aa64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_chainlinkOracle": "reference to the target Chainlink oracle"
        }
      },
      "isOutdated()": {
        "returns": {
          "_0": "true if read value is stale"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "read()": {
        "returns": {
          "_0": "oracle price",
          "_1": "true if price is valid"
        }
      },
      "update()": {
        "details": "no-op, Chainlink is updated automatically"
      }
    },
    "title": "Chainlink oracle wrapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "chainlinkOracle()": {
        "notice": "the referenced chainlink oracle"
      },
      "constructor": {
        "notice": "ChainlinkOracleWrapper constructor"
      },
      "isOutdated()": {
        "notice": "determine if read value is stale"
      },
      "read()": {
        "notice": "read the oracle price"
      },
      "update()": {
        "notice": "updates the oracle price"
      }
    },
    "notice": "Reads a Chainlink oracle value & wrap it under the standard oracle interface",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 168,
        "contract": "src/oracle/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5506,
        "contract": "src/oracle/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
        "label": "chainlinkOracle",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 5508,
        "contract": "src/oracle/ChainlinkOracleWrapper.sol:ChainlinkOracleWrapper",
        "label": "oracleDecimalsNormalizer",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}